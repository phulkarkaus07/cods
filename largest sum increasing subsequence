//largest sum increasing subsequence version of LIS  O(n^2)

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll ;
int main()
 {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int a[n];
	    for(int i=0;i<n;i++)cin>>a[i];
	    int dp[n];
	    for(int i=0;i<n;i++)dp[i]=a[i];
	    for(int j=1;j<n;j++){
	        for(int i=0;i<j;i++){
	            if(a[i] < a[j]){
	                dp[j] = max( dp[i]+a[j],dp[j] );
	            }
	        }
	    }
	    	int ans = -1;
	for(int i=0;i<n;i++){
	   // cout<<dp[i]<<" ";
	    ans = max(ans,dp[i]);
	}//cout<<endl;
	cout<<ans<<endl;
	}
 	return 0;
}
