#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
struct node {                                        //defined struct 
    struct node* left ;
    struct node* right ;
    int data;
};
void inorder(struct node* root ){               //to check BST
    if(root){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}
 node* add(struct node* root,int val){
    if(root==NULL){                                        //if leaf is null create node
      node* newnode = (node*)malloc(sizeof(node));
       newnode->left=NULL;
       newnode->right=NULL;
       newnode->data=val;
       return newnode;
    }
    if (root->data >val){
      root->left =  add(root->left,val);                         // insert it in left subtree
    }else{
       root->right = add(root->right,val);                             //insert in right subtree
    }
    return root;                                                   //return root for each fu ction call recursively
}
node* findmin(node* root){     
    while(root->left)root=root->left;                       //if the node has no left child then it is the minimum of that subtree 
    return root;
}
node* delete1(node* root,int val){
    if(root==NULL)return NULL;
    if(root->data > val)root->left = delete1(root->left,val);
    else if (root->data < val)root->right = delete1(root->right,val);
    else{
        //node with root->data == val found
        if(root->left==NULL && root->right==NULL) {     //leaf no child
            root=NULL;
           // delete root;  think??
        }   
        else if(root->left ==NULL){    //single child
            node* temp = root;
            root=root->right;
            delete temp;
        }else if (root->right==NULL){   //single child
            node* temp = root;
            root = root->left;
            delete temp;
        }
        else {                           //both childs present
            node* temp = findmin(root->right);           //find min in the roght subtree
            root->data = temp->data;
            root->right = delete1(root->right,temp->data);  // delete the duplicate min in the right subtre!! greate logic heree !!! 
            delete temp;
        }
    }
    return root;
}
int main(){
    int n;
    cin>>n;
    int val;
    struct node *root =NULL;
    for(int i=0;i<n;i++){ 
        cin>>val;
        root = add(root,val);                     // the add function finally will always return root 
    }
    inorder(root); 
    cout<<endl;
    //to check for bst
    int x,num;
    cin>>x;
    while(x--){
        cin>>num;
        root = delete1(root,num);
        inorder(root);
        cout<<endl;
    }
    return 0;
}
